import logging
logging.basicConfig(level=logging.INFO)
import sqlite3
import os
import requests
from datetime import datetime, timedelta
import pandas as pd
from config import TOKEN, OPENROUTER_API_KEY, OPENROUTER_API_URL, OPENROUTER_MODEL
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, filters

async def get_ai_response(prompt: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI —á–µ—Ä–µ–∑ OpenRouter"""
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://your-site.com",
            "X-Title": "Financial Bot"
        }

        payload = {
            "model": OPENROUTER_MODEL,
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7,
            "max_tokens": 500
        }

        response = requests.post(OPENROUTER_API_URL, headers=headers, json=payload, timeout=15)
        response.raise_for_status()

        return response.json()["choices"][0]["message"]["content"]

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ AI: {str(e)}"

async def ai_financial_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    user_id = update.effective_user.id

    db_path = os.path.join(os.path.expanduser("~"), 'finance.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "income"', (user_id,))
    income = cursor.fetchone()[0] or 0

    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "expense"', (user_id,))
    expense = cursor.fetchone()[0] or 0

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
    current_month = datetime.now().strftime('%Y-%m')
    cursor.execute('''
        SELECT SUM(amount) FROM transactions
        WHERE user_id = ? AND type = "income" AND strftime('%Y-%m', date) = ?
    ''', (user_id, current_month))
    income_month = cursor.fetchone()[0] or 0

    cursor.execute('''
        SELECT SUM(amount) FROM transactions
        WHERE user_id = ? AND type = "expense" AND strftime('%Y-%m', date) = ?
    ''', (user_id, current_month))
    expense_month = cursor.fetchone()[0] or 0

    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    cursor.execute('''
        SELECT category, SUM(amount), COUNT(*)
        FROM transactions
        WHERE user_id = ? AND type = 'expense'
        GROUP BY category
        ORDER BY SUM(amount) DESC
    ''', (user_id,))
    categories = cursor.fetchall()

    # –°–∞–º—ã–µ –∫—Ä—É–ø–Ω—ã–µ recent —Ç—Ä–∞—Ç—ã
    cursor.execute('''
        SELECT category, amount, description, date
        FROM transactions
        WHERE user_id = ? AND type = 'expense'
        ORDER BY amount DESC
        LIMIT 3
    ''', (user_id,))
    largest_expenses = cursor.fetchall()

    conn.close()

    # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    prompt = f"""
    –¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

    –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
    - –û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: {income:,.2f} —Ä—É–±
    - –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {expense:,.2f} —Ä—É–±
    - –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {income - expense:,.2f} —Ä—É–±
    - –î–æ—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {income_month:,.2f} —Ä—É–±
    - –†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {expense_month:,.2f} —Ä—É–±
    - –ú–µ—Å—è—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {income_month - expense_month:,.2f} —Ä—É–±

    –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–•–û–î–û–í:
    {chr(10).join([f'- {cat}: {amount:,.2f} —Ä—É–± ({count} –æ–ø–µ—Ä–∞—Ü–∏–π, {(amount/expense*100):.1f}% –æ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)' for cat, amount, count in categories]) if expense > 0 else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö'}

    –°–ê–ú–´–ï –ö–†–£–ü–ù–´–ï –¢–†–ê–¢–´:
    {chr(10).join([f'- {cat}: {amount:,.2f} —Ä—É–± ({desc or "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"})' for cat, amount, desc, date in largest_expenses]) if largest_expenses else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞—Ç–∞—Ö'}

    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

    1. –§–ò–ù–ê–ù–°–û–í–û–ï –ó–î–û–†–û–í–¨–ï:
    - –û—Ü–µ–Ω–∏ —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é (—Ö–æ—Ä–æ—à–æ/–ø–ª–æ—Ö–æ/–Ω–æ—Ä–º–∞–ª—å–Ω–æ)
    - –£–∫–∞–∂–∏ —Å–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã
    - –û—Ç–º–µ—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã

    2. –ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (–¥–ª—è –ï–ì–û —Å–∏—Ç—É–∞—Ü–∏–∏):
    - 3 —Å–∞–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–∞ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ò–ú–ï–ù–ù–û –≤ –µ–≥–æ —Å–ª—É—á–∞–µ
    - –ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º—ã–µ –∑–∞—Ç—Ä–∞—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π

    3. –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –°–û–í–ï–¢–´:
    - –ò—Å—Ö–æ–¥—è –∏–∑ –µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç—Ä–∞—Ç
    - –†–µ–∞–ª—å–Ω—ã–µ achievable —Ü–µ–ª–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü
    - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏/–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è

    –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ "–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç" –∏–ª–∏ "–æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ 10%". –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
    """

    await update.message.reply_text("ü§ñ –ì–ª—É–±–æ–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã... –≠—Ç–æ –∑–∞–π–º–µ—Ç 15-20 —Å–µ–∫—É–Ω–¥")

    try:
        analysis = await get_ai_response(prompt)

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        def clean_markdown(text):
            # –£–±–∏—Ä–∞–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ Markdown —Å–∏–º–≤–æ–ª—ã
            text = text.replace('*', '').replace('_', '').replace('`', '').replace('~', '')
            # –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            text = text.replace('[', '').replace(']', '').replace('(', '').replace(')', '')
            return text

        # –û—á–∏—â–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        clean_analysis = clean_markdown(analysis)

        # –ü—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        if len(clean_analysis) > 4000:
            parts = []
            current_part = "üìä –î–ï–¢–ê–õ–¨–ù–´–ô AI-–ê–ù–ê–õ–ò–ó –í–ê–®–ò–• –§–ò–ù–ê–ù–°–û–í:\n\n"

            sentences = clean_analysis.split('. ')
            for sentence in sentences:
                if len(current_part) + len(sentence) > 4000:
                    parts.append(current_part)
                    current_part = sentence + ". "
                else:
                    current_part += sentence + ". "

            if current_part:
                parts.append(current_part)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
            await update.message.reply_text(parts[0])
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
            for part in parts[1:]:
                await update.message.reply_text(part)

        else:
            await update.message.reply_text(
                f"üìä –î–ï–¢–ê–õ–¨–ù–´–ô AI-–ê–ù–ê–õ–ò–ó –í–ê–®–ò–• –§–ò–ù–ê–ù–°–û–í:\n\n{clean_analysis}"
            )

    except Exception as e:
        logging.error(f"AI analysis error: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def ai_financial_tip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã"""
    user_id = update.effective_user.id

    db_path = os.path.join(os.path.expanduser("~"), 'finance.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "expense"', (user_id,))
    total_expense = cursor.fetchone()[0] or 0

    cursor.execute('''
        SELECT category, SUM(amount)
        FROM transactions
        WHERE user_id = ? AND type = 'expense'
        GROUP BY category
        ORDER BY SUM(amount) DESC
        LIMIT 1
    ''', (user_id,))
    top_category = cursor.fetchone()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
    cursor.execute('SELECT COUNT(*) FROM transactions WHERE user_id = ?', (user_id,))
    total_transactions = cursor.fetchone()[0] or 0

    conn.close()

    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    prompt = f"""
    –î–∞–π –û–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∏ –ù–ï–û–ë–´–ß–ù–´–ô —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
    - –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_expense:,.2f} —Ä—É–±
    - –°–∞–º–∞—è –∑–∞—Ç—Ä–∞—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {top_category[0] if top_category else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'} ({top_category[1]:,.2f} —Ä—É–± if top_category else 0)
    - –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {total_transactions}

    –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–û–í–ï–¢–£:
    - –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ö–û–ù–ö–†–ï–¢–ù–´–ú –∏ actionable (—á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å)
    - –ù–ï–û–ë–´–ß–ù–´–ú (–∏–∑–±–µ–≥–∞–π –±–∞–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –≤—Ä–æ–¥–µ "–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç" –∏–ª–∏ "–æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ 10%")
    - –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ª–µ–≥–∫–æ implementable
    - –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º
    - –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    - –£—á–∏—Ç—ã–≤–∞–π –µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏

    –ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ò–• –°–û–í–ï–¢–û–í:
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 24 —á–∞—Å–æ–≤ - –ø–µ—Ä–µ–¥ –ª—é–±–æ–π –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–æ–π –∂–¥–∏—Ç–µ —Å—É—Ç–∫–∏"
    "–°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º –Ω–∞ –º–µ—Å—è—Ü"
    "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ 15% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç"

    –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –¢–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.
    """

    await update.message.reply_text("üí° –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –¥–ª—è –≤–∞—Å...")

    try:
        tip = await get_ai_response(prompt)
        await update.message.reply_text(
            f"üí° *–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –§–ò–ù–ê–ù–°–û–í–´–ô –°–û–í–ï–¢:*\n\n{tip}",
            parse_mode='Markdown'
        )
    except Exception as e:
        # Fallback —Å–æ–≤–µ—Ç –µ—Å–ª–∏ AI –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
        fallback_tips = [
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '–ø—Ä–∞–≤–∏–ª–æ 72 —á–∞—Å–æ–≤' - –ø–µ—Ä–µ–¥ –∫—Ä—É–ø–Ω–æ–π –ø–æ–∫—É–ø–∫–æ–π –∂–¥–∏—Ç–µ 3 –¥–Ω—è",
            "üí° –°–æ–∑–¥–∞–π—Ç–µ '–±—É—Ñ–µ—Ä–Ω—ã–π —Ñ–æ–Ω–¥' –Ω–∞ –º–µ–ª–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–º–ø—É–ª—å—Å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫",
            "üí° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ 10% —Å –∫–∞–∂–¥–æ–≥–æ –¥–æ—Ö–æ–¥–∞",
            "üí° –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ - –æ—Ç–º–µ–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü",
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–±—ç–∫-—Å–µ—Ä–≤–∏—Å—ã - –¥–∞–∂–µ 5% –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–¥—É—Ç –∑–∞–º–µ—Ç–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—é –∑–∞ –≥–æ–¥"
        ]
        import random
        await update.message.reply_text(random.choice(fallback_tips))


def init_db():
    db_path = os.path.join(os.path.expanduser("~"), 'finance.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            type TEXT NOT NULL,
            category TEXT NOT NULL,
            description TEXT,
            date TIMESTAMP NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def get_main_keyboard():
    return ReplyKeyboardMarkup([
        ['üíµ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥', 'üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç'],
        ['ü§ñ AI-–∞–Ω–∞–ª–∏–∑', 'üí° –°–æ–≤–µ—Ç –æ—Ç AI'],
        ['üìä Excel –æ—Ç—á–µ—Ç', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
        ['‚ùì –ü–æ–º–æ—â—å']
    ], resize_keyboard=True)

def get_period_keyboard():
    return ReplyKeyboardMarkup([
        ['üìÖ –°–µ–≥–æ–¥–Ω—è', 'üìÖ –ù–µ–¥–µ–ª—è'],
        ['üìÖ –ú–µ—Å—è—Ü', 'üìÖ –ü–æ–ª–≥–æ–¥–∞'],
        ['üìÖ –ì–æ–¥', 'üìÖ –í—Å–µ –≤—Ä–µ–º—è'],
        ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']
    ], resize_keyboard=True)

AMOUNT, CATEGORY, DESCRIPTION = range(3)

INCOME_CATEGORIES = ['üíº –ó–∞—Ä–ø–ª–∞—Ç–∞', 'üë®‚Äçüíª –§—Ä–∏–ª–∞–Ω—Å', 'üéÅ –ü–æ–¥–∞—Ä–æ–∫', 'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'üèÜ –ü—Ä–µ–º–∏—è', 'üì± –ü—Ä–æ—á–µ–µ']
EXPENSE_CATEGORIES = ['üçî –ï–¥–∞', 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üè† –ñ–∏–ª—å–µ', 'üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üè• –ó–¥–æ—Ä–æ–≤—å–µ', 'üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'üëï –û–¥–µ–∂–¥–∞', 'üì± –ü—Ä–æ—á–µ–µ']

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫!\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –¥–µ–Ω–µ–≥ üí∞\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

async def add_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–∏–ª–∏ '‚Ü©Ô∏è –ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
        reply_markup=get_back_keyboard()
    )
    context.user_data['type'] = 'income'
    return AMOUNT

async def add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–∏–ª–∏ '‚Ü©Ô∏è –ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω–∞):",
        reply_markup=get_back_keyboard()
    )
    context.user_data['type'] = 'expense'
    return AMOUNT

async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    try:
        amount = float(text.replace(',', '.'))
        context.user_data['amount'] = amount

        transaction_type = context.user_data['type']
        categories = INCOME_CATEGORIES if transaction_type == 'income' else EXPENSE_CATEGORIES

        keyboard = []
        for i in range(0, len(categories), 2):
            if i + 1 < len(categories):
                keyboard.append([categories[i], categories[i+1]])
            else:
                keyboard.append([categories[i]])

        keyboard.append(['‚Ü©Ô∏è –ù–∞–∑–∞–¥'])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥

        await update.message.reply_text(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CATEGORY

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 99.99) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚Ü©Ô∏è –ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            reply_markup=get_back_keyboard()
        )
        return AMOUNT

async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text

    if category == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    transaction_type = context.user_data['type']
    valid_categories = INCOME_CATEGORIES if transaction_type == 'income' else EXPENSE_CATEGORIES

    if category not in valid_categories:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚Ü©Ô∏è –ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            reply_markup=get_back_keyboard()
        )
        return CATEGORY

    context.user_data['category'] = category
    await update.message.reply_text(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –∏–ª–∏ '‚Ü©Ô∏è –ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã):",
        reply_markup=get_back_keyboard()
    )
    return DESCRIPTION

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
    if description == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    await save_transaction(update, context, description)
    return ConversationHandler.END

async def skip_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_transaction(update, context, "")
    return ConversationHandler.END

async def save_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE, description: str):
    db_path = os.path.join(os.path.expanduser("~"), 'finance.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute('''
        INSERT INTO transactions (user_id, amount, type, category, description, date)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (update.effective_user.id, context.user_data['amount'],
          context.user_data['type'], context.user_data['category'],
          description, datetime.now()))

    conn.commit()
    conn.close()

    transaction_type = "–¥–æ—Ö–æ–¥" if context.user_data['type'] == 'income' else "—Ä–∞—Å—Ö–æ–¥"
    emoji = "üíµ" if context.user_data['type'] == 'income' else "üí∞"

    await update.message.reply_text(
        f"{emoji} {transaction_type.capitalize()} {context.user_data['amount']} —Ä—É–±. "
        f"–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{context.user_data['category']}' –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else '–Ω–µ—Ç'}",
        reply_markup=get_main_keyboard()
    )

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_path = os.path.join(os.path.expanduser("~"), 'finance.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "income"', (update.effective_user.id,))
    income = cursor.fetchone()[0] or 0

    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "expense"', (update.effective_user.id,))
    expense = cursor.fetchone()[0] or 0

    cursor.execute('''
        SELECT category, SUM(amount)
        FROM transactions
        WHERE user_id = ? AND type = 'expense'
        GROUP BY category
        ORDER BY SUM(amount) DESC
    ''', (update.effective_user.id,))
    expense_by_category = cursor.fetchall()

    conn.close()

    report = "üìä *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
    report += f"üíµ *–î–æ—Ö–æ–¥—ã:* {income:,.2f} —Ä—É–±.\n"
    report += f"üí∞ *–†–∞—Å—Ö–æ–¥—ã:* {expense:,.2f} —Ä—É–±.\n"
    report += f"‚öñÔ∏è *–ë–∞–ª–∞–Ω—Å:* {income - expense:,.2f} —Ä—É–±.\n\n"

    if expense_by_category:
        report += "üìà *–†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:*\n"
        for category, amount in expense_by_category:
            percentage = (amount / expense * 100) if expense > 0 else 0
            report += f"‚Ä¢ {category}: {amount:,.2f} —Ä—É–±. ({percentage:.1f}%)\n"

    await update.message.reply_text(report, parse_mode='Markdown')

async def detailed_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_path = os.path.join(os.path.expanduser("~"), 'finance.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute('''
        SELECT type, amount, category, description, date
        FROM transactions
        WHERE user_id = ?
        ORDER BY id DESC
        LIMIT 10
    ''', (update.effective_user.id,))
    recent_transactions = cursor.fetchall()

    conn.close()

    if not recent_transactions:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π")
        return

    report = "üìã *–ü–û–°–õ–ï–î–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò:*\n\n"

    for i, (tr_type, amount, category, description, date) in enumerate(recent_transactions, 1):
        emoji = "üíµ" if tr_type == 'income' else "üí∞"
        type_text = "–î–æ—Ö–æ–¥" if tr_type == 'income' else "–†–∞—Å—Ö–æ–¥"
        date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S.%f').strftime('%d.%m.%Y %H:%M')

        report += f"{i}. {emoji} *{type_text}: {amount:,.2f} —Ä—É–±.*\n"
        report += f"   üè∑Ô∏è {category}\n"
        if description:
            report += f"   üìù {description}\n"
        report += f"   üïí {date_str}\n\n"

    await update.message.reply_text(report, parse_mode='Markdown')

async def generate_excel_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞"""
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_period_keyboard()
    )
    context.user_data['awaiting_period'] = True

async def create_excel_file(user_id: int, period: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    db_path = os.path.join(os.path.expanduser("~"), 'finance.db')
    conn = sqlite3.connect(db_path)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
    now = datetime.now()
    if period == 'today':
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
    elif period == 'week':
        start_date = now - timedelta(days=7)
    elif period == 'month':
        start_date = now - timedelta(days=30)
    elif period == 'half_year':
        start_date = now - timedelta(days=180)
    elif period == 'year':
        start_date = now - timedelta(days=365)
    else:  # all_time
        start_date = datetime(2000, 1, 1)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    query = '''
        SELECT date, type, category, amount, description
        FROM transactions
        WHERE user_id = ? AND date >= ?
        ORDER BY date DESC
    '''

    df = pd.read_sql_query(query, conn, params=(user_id, start_date))
    conn.close()

    if df.empty:
        return None

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
    df['date'] = pd.to_datetime(df['date'])
    df['–î–∞—Ç–∞'] = df['date'].dt.strftime('%d.%m.%Y %H:%M')

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    df = df.rename(columns={
        'type': '–¢–∏–ø',
        'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        'amount': '–°—É–º–º–∞',
        'description': '–û–ø–∏—Å–∞–Ω–∏–µ'
    })

    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    filename = f"finance_report_{user_id}_{period}.xlsx"
    filepath = os.path.join(os.path.expanduser("~"), filename)

    with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
        # ===== –õ–ò–°–¢ 1: –î–ï–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï =====
        detailed_df = df[['–î–∞—Ç–∞', '–¢–∏–ø', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–°—É–º–º–∞', '–û–ø–∏—Å–∞–Ω–∏–µ']].copy()
        detailed_df['–¢–∏–ø'] = detailed_df['–¢–∏–ø'].map({'income': '–î–æ—Ö–æ–¥', 'expense': '–†–∞—Å—Ö–æ–¥'})
        detailed_df.to_excel(writer, sheet_name='–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        worksheet = writer.sheets['–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        column_widths = [20, 10, 15, 15, 30]
        for i, width in enumerate(column_widths, 1):
            worksheet.column_dimensions[chr(64 + i)].width = width

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        for col_num, value in enumerate(detailed_df.columns, 1):
            cell = worksheet.cell(row=1, column=col_num)
            cell.font = cell.font.copy(bold=True)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—É–º–º
        for row in range(2, len(detailed_df) + 2):
            cell = worksheet.cell(row=row, column=4)  # –ö–æ–ª–æ–Ω–∫–∞ –°—É–º–º–∞
            cell.number_format = '#,##0.00" —Ä—É–±"'

            # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: –¥–æ—Ö–æ–¥—ã - –∑–µ–ª–µ–Ω—ã–π, —Ä–∞—Å—Ö–æ–¥—ã - –∫—Ä–∞—Å–Ω—ã–π
            type_cell = worksheet.cell(row=row, column=2)  # –ö–æ–ª–æ–Ω–∫–∞ –¢–∏–ø
            if type_cell.value == '–î–æ—Ö–æ–¥':
                cell.font = cell.font.copy(color='FF008000')  # –ó–µ–ª–µ–Ω—ã–π
            else:
                cell.font = cell.font.copy(color='FFFF0000')  # –ö—Ä–∞—Å–Ω—ã–π

        # ===== –õ–ò–°–¢ 2: –°–í–û–î–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú =====
        summary = df.groupby(['–¢–∏–ø', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è']).agg({
            '–°—É–º–º–∞': ['sum', 'count']
        }).round(2)
        summary.columns = ['–°—É–º–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π']
        summary = summary.reset_index()
        summary['–¢–∏–ø'] = summary['–¢–∏–ø'].map({'income': '–î–æ—Ö–æ–¥', 'expense': '–†–∞—Å—Ö–æ–¥'})

        summary.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å–≤–æ–¥–∫–∏
        worksheet_summary = writer.sheets['–°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']

        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_widths_summary = [10, 15, 15, 20]
        for i, width in enumerate(column_widths_summary, 1):
            worksheet_summary.column_dimensions[chr(64 + i)].width = width

        # –ñ–∏—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col_num, value in enumerate(summary.columns, 1):
            cell = worksheet_summary.cell(row=1, column=col_num)
            cell.font = cell.font.copy(bold=True)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º
        for row in range(2, len(summary) + 2):
            cell = worksheet_summary.cell(row=row, column=3)  # –ö–æ–ª–æ–Ω–∫–∞ –°—É–º–º–∞
            cell.number_format = '#,##0.00" —Ä—É–±"'

            cell = worksheet_summary.cell(row=row, column=4)  # –ö–æ–ª–æ–Ω–∫–∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
            cell.number_format = '0'

        # ===== –õ–ò–°–¢ 3: –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
        stats = df.groupby('–¢–∏–ø').agg({
            '–°—É–º–º–∞': ['sum', 'count', 'mean', 'max', 'min']
        }).round(2)
        stats.columns = ['–û–±—â–∞—è —Å—É–º–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π', '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞']
        stats = stats.reset_index()
        stats['–¢–∏–ø'] = stats['–¢–∏–ø'].map({'income': '–î–æ—Ö–æ–¥', 'expense': '–†–∞—Å—Ö–æ–¥'})

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
        total_income = stats[stats['–¢–∏–ø'] == '–î–æ—Ö–æ–¥']['–û–±—â–∞—è —Å—É–º–º–∞'].sum()
        total_expense = stats[stats['–¢–∏–ø'] == '–†–∞—Å—Ö–æ–¥']['–û–±—â–∞—è —Å—É–º–º–∞'].sum()
        balance = total_income - total_expense

        stats.to_excel(writer, sheet_name='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        worksheet_stats = writer.sheets['–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']

        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_widths_stats = [15, 15, 20, 15, 20, 20]
        for i, width in enumerate(column_widths_stats, 1):
            worksheet_stats.column_dimensions[chr(64 + i)].width = width

        # –ñ–∏—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col_num, value in enumerate(stats.columns, 1):
            cell = worksheet_stats.cell(row=1, column=col_num)
            cell.font = cell.font.copy(bold=True)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
        for row in range(2, len(stats) + 2):
            for col in range(2, 7):  # –ö–æ–ª–æ–Ω–∫–∏ —Å —á–∏—Å–ª–∞–º–∏
                cell = worksheet_stats.cell(row=row, column=col)
                if col == 3:  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
                    cell.number_format = '0'
                else:
                    cell.number_format = '#,##0.00" —Ä—É–±"'

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–∞–ª–∞–Ω—Å–æ–º
        balance_row = len(stats) + 3
        worksheet_stats.cell(row=balance_row, column=1, value='–ë–ê–õ–ê–ù–°:').font = cell.font.copy(bold=True)
        worksheet_stats.cell(row=balance_row, column=2, value=balance).number_format = '#,##0.00" —Ä—É–±"'

        if balance >= 0:
            worksheet_stats.cell(row=balance_row, column=2).font = cell.font.copy(color='FF008000')
        else:
            worksheet_stats.cell(row=balance_row, column=2).font = cell.font.copy(color='FFFF0000')

    return filepath

async def handle_period_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞"""
    if not context.user_data.get('awaiting_period'):
        return

    period_mapping = {
        'üìÖ –°–µ–≥–æ–¥–Ω—è': 'today',
        'üìÖ –ù–µ–¥–µ–ª—è': 'week',
        'üìÖ –ú–µ—Å—è—Ü': 'month',
        'üìÖ –ü–æ–ª–≥–æ–¥–∞': 'half_year',
        'üìÖ –ì–æ–¥': 'year',
        'üìÖ –í—Å–µ –≤—Ä–µ–º—è': 'all_time'
    }

    user_choice = update.message.text

    if user_choice == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
        context.user_data.pop('awaiting_period', None)
        return

    if user_choice not in period_mapping:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_period_keyboard()
        )
        return

    period_key = period_mapping[user_choice]

    await update.message.reply_text(
        f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel –æ—Ç—á–µ—Ç –∑–∞ {user_choice.lower()}...",
        reply_markup=ReplyKeyboardRemove()
    )

    try:
        filepath = await create_excel_file(update.effective_user.id, period_key)

        if filepath is None:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
                reply_markup=get_main_keyboard()
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(filepath, 'rb') as file:
                await update.message.reply_document(
                    document=file,
                    caption=f"üìä Excel –æ—Ç—á–µ—Ç –∑–∞ {user_choice.lower()}\n\n"
                        "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç 3 –ª–∏—Å—Ç–∞:\n"
                        "üìã ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞—Ç–∞–º–∏\n"
                        "üìà ‚Ä¢ –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
                        "üìä ‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –±–∞–ª–∞–Ω—Å\n\n"
                        "üí° –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è",
                    reply_markup=get_main_keyboard()
                )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(filepath)

    except Exception as e:
        logging.error(f"Excel generation error: {str(e)}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

    context.user_data.pop('awaiting_period', None)

async def clear_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([
        ['‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å', '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞']
    ], resize_keyboard=True)

    await update.message.reply_text(
        "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!*\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    context.user_data['awaiting_confirm'] = True

async def confirm_clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å':
        db_path = os.path.join(os.path.expanduser("~"), 'finance.db')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        cursor.execute('DELETE FROM transactions WHERE user_id = ?', (update.effective_user.id,))
        conn.commit()
        conn.close()

        await update.message.reply_text(
            "üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_keyboard()
        )

    context.user_data.pop('awaiting_confirm', None)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
ü§ñ *–§–ò–ù–ê–ù–°–û–í–´–ô –ü–û–ú–û–©–ù–ò–ö - –°–ü–†–ê–í–ö–ê*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üíµ *–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥* - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏
üí∞ *–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥* - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤
üìã *–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç* - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
üìä *Excel –æ—Ç—á–µ—Ç* - –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª
ü§ñ *AI-–∞–Ω–∞–ª–∏–∑* - –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
üí° *–°–æ–≤–µ—Ç –æ—Ç AI* - —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç
üóëÔ∏è *–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ* - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏

*–ü–µ—Ä–∏–æ–¥—ã –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞:*
üìÖ –°–µ–≥–æ–¥–Ω—è - –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
üìÖ –ù–µ–¥–µ–ª—è - –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
üìÖ –ú–µ—Å—è—Ü - –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
üìÖ –ü–æ–ª–≥–æ–¥–∞ - –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 180 –¥–Ω–µ–π
üìÖ –ì–æ–¥ - –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 365 –¥–Ω–µ–π
üìÖ –í—Å–µ –≤—Ä–µ–º—è - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """

    await update.message.reply_text(help_text, parse_mode='Markdown')

def get_back_keyboard():
    return ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_confirm'):
        await confirm_clear(update, context)
    elif context.user_data.get('awaiting_period'):
        await handle_period_selection(update, context)
    else:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )

def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^üíµ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥$'), add_income),
            MessageHandler(filters.Regex('^üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥$'), add_expense)
        ],
        states={
            AMOUNT: [
                MessageHandler(filters.Regex('^‚Ü©Ô∏è –ù–∞–∑–∞–¥$'), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount)
            ],
            CATEGORY: [
                MessageHandler(filters.Regex('^‚Ü©Ô∏è –ù–∞–∑–∞–¥$'), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_category)
            ],
            DESCRIPTION: [
                MessageHandler(filters.Regex('^‚Ü©Ô∏è –ù–∞–∑–∞–¥$'), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_description),
                CommandHandler('skip', skip_description)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('cancel', cancel))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), show_statistics))
    application.add_handler(MessageHandler(filters.Regex('^üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç$'), detailed_report))
    application.add_handler(MessageHandler(filters.Regex('^üìä Excel –æ—Ç—á–µ—Ç$'), generate_excel_report))
    application.add_handler(MessageHandler(filters.Regex('^üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ$'), clear_data))
    application.add_handler(MessageHandler(filters.Regex('^‚ùì –ü–æ–º–æ—â—å$'), help_command))
    application.add_handler(MessageHandler(filters.Regex('^ü§ñ AI-–∞–Ω–∞–ª–∏–∑$'), ai_financial_analysis))
    application.add_handler(MessageHandler(filters.Regex('^üí° –°–æ–≤–µ—Ç –æ—Ç AI$'), ai_financial_tip))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò–¥–∏—Ç–µ –≤ Telegram –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤–∞—à–µ–º—É –±–æ—Ç—É")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    application.run_polling()

if __name__ == '__main__':
    main()